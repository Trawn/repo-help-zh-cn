		repo
			——重铺，符合国家标准，顺应本市精神
此帮助基于repo v1.6.8.10

repo的基本用法： repo 命令 [参数...]

完整的被认可的命令列表如下：
	abandon     彻底放弃一个开发分支
	branches    查看当前的局部分支[注：topic branch
				Topic branches are typically lightweight branches that you create
				locally and that have a name that is meaningful for you. They are
				where you might do work for a bug fix or feature (they're also
				called feature branches) that is expected to take some time to
				complete.
				Another type of branch is the "remote branch" or "remote-tracking
				branch". This type of branch follows the development of somebody
				else's work and is stored in your own repository. You periodically
				update this branch (using git fetch) to track what is happening
				elsewhere. When you are ready to catch up with everybody else's
				changes, you would use git pull to both fetch and merge.]
	checkout    检出一个分支进行开发
	diff        显示提交和工作树之间的改变／差异
	download    下载并检出一个变更
	forall      在每个项目上都运行同一个shell命令
	grep        列出能匹配一个模式的行
	help        显示一个命令的详细帮助
	init        在当前目录初始化repo
	manifest    Manifest这个清单文件的检查工具
	prune       去除（删除）已经合并的局部分支
	selfupdate  升级repo到最新版本
	stage       Stage file(s) for commit
	start       开始一个新分支进行开发
	status      显示工作树的状态
	sync        更新工作树到最新版
	upload      提交变更，准备进行复审
	version     显示repo的版本号
	
	
1. repo abandon
	简述
	————
	彻底的放弃一个开发分支

	用法：repo abandon <分支名字> [<项目>...]
	
	这个字命令可以彻底的放弃一个开发分支，从本地的仓库中删除它（包括它所有的历史）。
	
	这个命令相当于"git branch -D <分支名字>"

	选项：
		-h, --help	显示这个帮助信息然后退出
		
2. repo branches
	简述
	--------
	显示当前可用的局部分支的摘要

	用法: repo branches [<项目>...]

	分支显示
	--------
	这个命令所显示出来的分支信息,共4列组成,例如:
	*P nocolor			| in repo
	   repo2			|
	第一列如果是指定项目中,当前已经检出的分支,则包含了一个*号;如果没有项目的分支检出,则显示一个空行
	第二列显示的内容,要么是一个空格,要么是小写的p,或者大写的P,这要视分支的上传情况而定

		空格:分支还没有用repo upload发布过
		大写P:所有的提交都已经用repo upload发布了
		小写p:只有部分提交用repo upload发布了

	第三列是分支的名字.
	第四列,也就是在|分隔符后面的部分,列出这个分支在哪个项目中,或者不在哪个项目中.如果没有显示任何项目列表,那么说明这个分支在所有的项目中.

	选项:
	-h,--help	显示这个帮助信息后退出.

3. repo checkout
   简述
   --------
   检出一个分支进行开发。

   用法：repo checkout <分支名字> [<项目>...]

   选项：
	-h, --help	显示这个帮助信息后退出.

   描述
   --------
   命令'repo checkout'会检出一个先前用'repo start'建立的分支
   这个命令等同于
	repo forall [<项目>...] -c git checkout <branchname>

4. repo diff
   简述
   --------
   显示提交和工作树之间的差异

   用法: repo diff [<项目>...]

   选项:
		-h, --help 显示这个帮助信息后退出

5. repo download
   简述
   --------
   下载并且检出一个变更.

   用法: repo download {project change[/patchset]}

   选项:
		-h, --help		显示这个帮助信息后退出

   <------- ?????????????? －－－－－－－－>
   描述
   --------
   命令 'repo download', 会从审查系统中下载一个变更,并让它保存在你本地的项目的工作树中, 成为其中一部分.


6. repo forall
   简述
   --------
   在所有的项目上都运行一下一个shell命令

   用法: repo forall [<project>...] -c <command> [<arg>...]

   选项:
		-h, --help		显示这个帮助信息后退出
		-c, --command	要执行的命令(及参数)

		输出:
			-p			在输出前显示项目的头信息
			-v,--verbose显示命令的错误信息

	描述
	--------
	在每个项目上都执行相同的一个shell命令

	输出格式
	--------
	选项-p,可以让'repo forall'把管道绑定到命令的stdin, stout和stderr流上, 并且输送所有的输出到一个连续的流中, 这个流会显示在一个pager的会话中. 项目的头信息会被插到每个命令的输出流的前面. 如果这个命令在一个项目上不产生输出, 则相应的头信息也不会显示.

	选项-p产生的格式转换非常适合来做某些搜索工作. 比如, 'repo forall -p -c git log -SFoo', 这会打印出所有的关于Foo的添加删除等提交信息.
