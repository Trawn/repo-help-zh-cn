		repo
			——重铺，符合国家标准，顺应本市精神
此帮助基于repo v1.6.8.10

repo的基本用法： repo 命令 [参数...]

完整的被认可的命令列表如下：
	abandon     彻底放弃一个开发分支
	branches    查看当前的局部分支[注：topic branch
				Topic branches are typically lightweight branches that you create
				locally and that have a name that is meaningful for you. They are
				where you might do work for a bug fix or feature (they're also
				called feature branches) that is expected to take some time to
				complete.
				Another type of branch is the "remote branch" or "remote-tracking
				branch". This type of branch follows the development of somebody
				else's work and is stored in your own repository. You periodically
				update this branch (using git fetch) to track what is happening
				elsewhere. When you are ready to catch up with everybody else's
				changes, you would use git pull to both fetch and merge.]
	checkout    检出一个分支进行开发
	diff        显示提交和工作树之间的改变／差异
	download    下载并检出一个变更
	forall      在每个项目上都运行同一个shell命令
	grep        列出能匹配一个模式的行
	help        显示一个命令的详细帮助
	init        在当前目录初始化repo
	manifest    Manifest这个清单文件的检查工具
	prune       去除（删除）已经合并的局部分支
	selfupdate  升级repo到最新版本
	stage       Stage file(s) for commit
	start       开始一个新分支进行开发
	status      显示工作树的状态
	sync        更新工作树到最新版
	upload      提交变更，准备进行复审
	version     显示repo的版本号
	
	
1. repo abandon
	简述
	————
	彻底的放弃一个开发分支

	用法：repo abandon <分支名字> [<项目>...]
	
	这个字命令可以彻底的放弃一个开发分支，从本地的仓库中删除它（包括它所有的历史）。
	
	这个命令相当于"git branch -D <分支名字>"

	选项：
		-h, --help	显示这个帮助信息然后退出
		
2. repo branches
	简述
	--------
	显示当前可用的局部分支的摘要

	用法: repo branches [<项目>...]

	分支显示
	--------
	这个命令所显示出来的分支信息,共4列组成,例如:
	*P nocolor			| in repo
	   repo2			|
	第一列如果是指定项目中,当前已经检出的分支,则包含了一个*号;如果没有项目的分支检出,则显示一个空行
	第二列显示的内容,要么是一个空格,要么是小写的p,或者大写的P,这要视分支的上传情况而定

		空格:分支还没有用repo upload发布过
		大写P:所有的提交都已经用repo upload发布了
		小写p:只有部分提交用repo upload发布了

	第三列是分支的名字.
	第四列,也就是在|分隔符后面的部分,列出这个分支在哪个项目中,或者不在哪个项目中.如果没有显示任何项目列表,那么说明这个分支在所有的项目中.

	选项:
	-h,--help	显示这个帮助信息后退出.

3. repo checkout
   简述
   --------
   检出一个分支进行开发。

   用法：repo checkout <分支名字> [<项目>...]

   选项：
	-h, --help	显示这个帮助信息后退出.

   描述
   --------
   命令'repo checkout'会检出一个先前用'repo start'建立的分支
   这个命令等同于
	repo forall [<项目>...] -c git checkout <branchname>

4. repo diff
   简述
   --------
   显示提交和工作树之间的差异

   用法: repo diff [<项目>...]

   选项:
		-h, --help 显示这个帮助信息后退出

5. repo download
   简述
   --------
   下载并且检出一个变更.

   用法: repo download {project change[/patchset]}

   选项:
		-h, --help		显示这个帮助信息后退出

   <------- ?????????????? －－－－－－－－>
   描述
   --------
   命令 'repo download', 会从审查系统中下载一个变更,并让它保存在你本地的项目的工作树中, 成为其中一部分.


6. repo forall
   简述
   --------
   在所有的项目上都运行一下一个shell命令

   用法: repo forall [<project>...] -c <command> [<arg>...]

   选项:
		-h, --help		显示这个帮助信息后退出
		-c, --command	要执行的命令(及参数)

		输出:
			-p			在输出前显示项目的头信息
			-v,--verbose显示命令的错误信息

	描述
	--------
	在每个项目上都执行相同的一个shell命令

	输出格式
	--------
	选项-p,可以让'repo forall'把管道绑定到命令的stdin, stout和stderr流上, 并且输送所有的输出到一个连续的流中, 这个流会显示在一个pager的会话中. 项目的头信息会被插到每个命令的输出流的前面. 如果这个命令在一个项目上不产生输出, 则相应的头信息也不会显示.

	选项-p产生的格式转换非常适合来做某些搜索工作. 比如, 'repo forall -p -c git log -SFoo', 这会打印出所有的关于Foo的添加删除等提交信息.

	如果一个项目只有标准错误stderr输出的话, -v选项能让repo forall显示这些错误输出. 一般来讲, -p选项只会在命令至少有一个字节byte的输出时才会起作用.

	环境
	--------
	pwd表示当前项目的工作目录. 如果当前的客户端是一个镜像的客户端, 那么pwd就是Git仓库.

	REPO_PROJECT 设定成项目的唯一名字
	REPO_PATH 客户端的相对路径
	REPO_REMOTE 从manifest得到的远程系统的名字
	REPO_LREV 是从manifest中得到的版次的名字, 和写在manifest中的是完全一样的

	shell中按序排列的参数($1, $2, ..., $#)就是一五一十的<command>后的参数

	除非-p选项被使用了, 否则stdin, stdout, stderr都是从terminal继承来的, 并不会被重定向.


7. repo grep
   简述
   --------
   打印出符合某个模式的行

   用法: repo grep {pattern模式 | -e pattern} [<项目>...]

   选项:
		-h, --help				显示这个帮助信息后退出

		Sources:
			--cached			搜索索引, 而不是工作树
			-r TREEish, --revision=TREEish
								搜索TREEish, 而不是工作树
								
		模式:
			-e PATTERN			用来搜索的模式
			-i, --ignore-case	忽略大小写
			-a, --text			把二进制文件像文本文件一样处理
			-I					不要试着在二进制文件中去进行匹配
			-w, --word-regexp	在word级别上进行匹配
			-v, --invert-match	选择不匹配的行
			-G, --basic-regexp	模式采用基本的POSIX正则表达式(默认)
			-E, --extended-regexp
								模式采用扩展的POSIX正则表达式
			-F, --fixed-strings	模式采用固定的字符串(不是正则表达式)

	模式分组:
		--all-match				限制匹配的行包括所有的模式
		--and, --or, --not		布尔操作, 用来组合各种模式
		-(, -) 		 			布尔操作分组

	输出:
		-n						在匹配行前面加上行号
		-C CONTEXT				围绕匹配行显示上下文
		-B CONTEXT				显示匹配行前文
		-A CONTEXT				显示匹配行后文
		-l, --name-only, --files-with-matches
								只显示包含匹配行的文件的名字
		-L, --files-without-match
								只显示不包含匹配行的文件的名字

	描述
	--------
	在所有的项目文件中搜索指定的模式

	布尔操作
	--------
	下面的这些选项, 在一个模式的中,可以尽可能多的出现, 从而使这个模式的表达更清楚
	-e PATTERN
	--and, --or, --not, -(, -)
	进一步讲, 为了扫描多个树,选项-r/--revision可以被多次指定. 如果想再的文件匹配出现在多个树里, 只有第一个结果会被报告出来, 版次的名字会做为这个结果的前缀.

	例子
	--------
	要找一行, 里面有#define, 并且有'MAX_PATH' 或者 'PATH_MAX':
		repo grep -e '#define' --and -\( -e MAX_PATH -e PATH_MAX \)

	查找一行, 里面有 'NODE'或'Unexpected', 并且在一个文件中这两个都有的.
		repo grep --all-match -e NODE -e Unexpected


8. repo help
   简述
   --------
   显示命令的详细帮助

   用法: repo help [--all|command]

   选项:
		-h, --help				显示这个帮助信息后退出
		-a, --all				显示完整的命令列表

	描述
	--------
	显示命令的详细用法信息


9.  repo init
    简述
    --------
	在当前目录初始化repo.

	用法: repo init [选项]

	选项:
		-h, --help				显示这个帮助信息后退出

		日志打印选项:
			-q, --quiet			安静模式, 应该是啥都不打印出来吧

		manifest选项:
			-u URL, --manifest-url=URL
								manifest仓库的位置
			-b REVISION, --manifest-branch-REVISION
								manifest的分支或版次
			-m NAME.xml, --manifest-name=NAME.xml
								初始化menifest文件
			--mirror			mirror the forrest

		repo的版本的选项:
			--repo-url=URL		repo仓库的位置
			--repo-branch=REVISION
								repo的分支或版次
			--no-repo-verify	不要验证repo的源码

	描述
	--------
	repo init命令只需运行一次来进行repo的安装和初始化. 最新版本的repo源码和manifest集合会被从服务器上下载并安装到当前工作树的.repo目录下.

	-b选项, 可以用来选择manifest的分支, 从而可以对这个分支进行检出和使用. 如果没有指定分支, 那么master这个主分支是默认值.

	-m选项, 可以用来指定一个备选的manifest来进行使用, 如果没有指定这个manifest, 那么默认的manifest是default.xml.

	切换manifest分支
	----------------
	要切换到另一个manifest分支, 可以在已存在的客户端中使用'repo -init -b 其他分支'来完成. 需要说明的是, 这个命令只会更新manifest, 所以需要一个后继的命令repo sync(或者repo sync -d)来更新工作目录的文件.


10. repo manifest
	简述
	--------
	manifest检验工具

	用法: repo manifest [-o {-|NAME.xml} [-r]]

	选项:
		-h, --help				显示这个帮助信息后退出
		-r, --revision-as-HEAD	把某版次存为当前的HEAD
		-o -|NAME.xml, --output-file=-|NAME.xml
								把manifest存为NAME.xml

	描述
	--------
	使用-o选项, 来检查当前的manifest文件. manifest文件和local_manifest.xml(如果存在)合并到一起, 产生一个新的单一的manifest文件. 这个文件会存储在git仓库里, 在将来使用repo init时可以用到它.

	repo Manifest格式
	=================
	一个repo manifest里,描述了这个repo客户端的结构; 这就是我们看到的目录结构以及用git可以从哪里得到这些东西.
	基本的manifest的结构是, 一个空的git仓库带着一个名叫'default.xml'的xml文件, 这个文件在最顶层目录中.
	manifest文件是一定有它的版本控制的, 因为它们被保存在一个git仓库中. manifest文件们的升级, 是自动的在客户端运行repo sync而获得的.

	XML文件格式
	--------
	一个manifest的XML文件(例如default.xml)大概的遵循下面的定义:
	<!ELEMENT manifest (remote*,
                        default?,
                        remove-project*,
                        project*)>
  
    <!ELEMENT remote (EMPTY)>
    <!ATTLIST remote name         ID    #REQUIRED>
    <!ATTLIST remote fetch        CDATA #REQUIRED>
    <!ATTLIST remote review       CDATA #IMPLIED>
  
    <!ELEMENT default (EMPTY)>
    <!ATTLIST default remote   IDREF #IMPLIED>
    <!ATTLIST default revision CDATA #IMPLIED>
  
    <!ELEMENT project (EMPTY)>
    <!ATTLIST project name     CDATA #REQUIRED>
    <!ATTLIST project path     CDATA #IMPLIED>
    <!ATTLIST project remote   IDREF #IMPLIED>
    <!ATTLIST project revision CDATA #IMPLIED>
  
    <!ELEMENT remove-project (EMPTY)>
    <!ATTLIST remove-project name  CDATA #REQUIRED>
  ]>
	下面是对这些元素和它们属性的描述.

	Element manifest
	----------------
	这个文件的根元素.

	Element remote
	----------------
	可以指定一个或多个远程元素. 每个远程元素, 都会列出一个git的url, 这个url被一个或多个项目共用. (可选的)同时也指出Gerrit审查服务器, 这些项目会把变更上传到这些服务器上.
	属性name: manifest文件的一个唯一的短名字, 在这里列出的这个名字, 也就是每个项目的远程名, 记在.git/config里. 因此它自动的对下列命令是有效的: git fetch, git remote, git pull, git push, 等等.
	属性fetch: 这是一个Git url, 会作为所有项目的前缀用来操作这个远程的库. 每个项目的名字都会加上这个前缀, 从而可以确定这个项目的真实地址, 以便进行clone等操作.
	属性review: Gerrit服务器的主机名, 要审查的内容会通过repo upload上传到这里. 这个属性是可选的, 如果没有这一项, 那么repo upload没有任何作用.

	Element default
	----------------
	至少有一个默认元素default element需要被指定. 当一个项目没有指定它自己的远程或版次属性的话, 这个默认的远程或版次属性就被应用到这个项目上面了.
	属性remote: 先前定义的远程元素的名字. 如果项目中的元素没有它自己的这个远程属性的话, 则这个属性会应用在这个项目上.
	属性revision: git分支的名字(例如, master或者refs/heads/master). 项目元素中没有它自己的这个属性的话会使用些值.

	Element project
	----------------
	指定一个或多个项目元素. 每一个元素都描述了一个git仓库, 从而可以被clone到本地的repo客户端的工作空间中来.
	属性name: 这个项目的唯一名. 这个项目名会追加到远程抓取url后面, 这样就产生了一个可以配置管理远程git的真实url. 这个url产生的形式如下:
	${remote_fetch}/${project_name}.git
	当${remote_fetch}是远程抓取属性, 并且${project_name}是项目名属性, .git后缀会始终加在后面 , repo会认为上传的东西是一个个的git仓库组成的群.
	如果使用gerrit来作代码审查, 这个项目名称必须满足gerrit的要求.
	属性path: 可选项, 相对于repo客户端的顶层目录, 告诉git对于这个项目, 它的工作目录在哪里. 如果不提供这一项, 则直接用项目名字来代替.
	属性remote: 先前定义过的远程元素的名字. 如果不提供, 则使用默认的远程元素的.
	属性revision: 在manifest中用来跟踪这个项目的git分支的名字. 可以是相对于refs/heads(例如 只写上master), 或者绝对的(例如, refs/heads/master). 理论上讲, 标签和清晰的SHA-1也可以有这个作用, 但是还没有很好的做过这方面的测试. 如果不提供这一项, 默认的元素值会被使用.

	{>,,<这一段都 乱七八早的}
	
	Element remove-project
	----------------
	从内部manifest列表中删除命名的项目, 有可能允许在同样的manifest中, 一个后继的项目元素用不同的源码来取代这个项目.
	这个元素在local_manifest.xml中会很有用. 这样用户就可以轻易的去掉一个项目, 并且可以用他们自己的定义的东西来取代原来的内容.

	本地manifest
	================
	通过本地的manifest, 可以加入其他的远程库或项目. 这个文件在'$TOP_DIR/.repo/local_manifest.xml'.
	例如:
		$ cat .repo/local_manifest.xml
		  <?xml version="1.0" encoding="UTF-8"?>
		    <manifest>
			    <project path="manifest"
            	 name="tools/manifest" />
				<project path="platform-manifest"
				 name="platform/manifest" />
		    </manifest>

	用户可以在repo sync之前把项目加到本地manifest中, 这样就可以让repo自动下载和管理这些额外的项目了.


11. repo prune
	简述
	----
	删除已经合并的topics(主题分支).

	用法: repo prune [<project>...]

	选项:
		-h, --help				显示这个帮助信息后退出.


12. repo selfupdate
	简述
	----
	更新repo到最新版本
	用法: repo selfupdate

	选项:
		-h, --help				显示这个帮助信息后退出.

		repo版本选项:
			--no-repo-verify	不要验证repo源码.

	描述
	----
	如果有新版本的repo存在, 这个命令会升级repo到最新版本.
	通常这个动作在repo sync时会自动去做, 所以不需要最终用户手动去执行.


13. repo stage
	简述
	----
	暂存文件, 以备提交

	用法: repo stage -i[<project>...]

	选项:
		-h, --help				显示这个帮助信息后退出
		-i, --interactive		交互式的暂存方式

	描述
	--------
	这个命令把文件暂存起来以备下次提交


14. repo start
	简述
	----
	建立一个开发用的新分支.

	用法: repo start <newbranchname> [--all | <project>...]

	选项:
		-h, --help				显示这个帮助信息后退出.
		--all					把这个分支应用到所有的项目上.

	描述
	----
	这个命令建立一个新的开发分支, 这个分支是人manifest中指定的版次拉出来的.

15. repo status
	简述
	----
	显示工作树的状态

	用法: repo status [<project>...]

	选项:
		-h, --help				显示这个帮助信息后退出

	描述
	----
	这个命令用来比较工作树和暂存区域(又叫索引index), 和大部分在这个分支上的最近提交(HEAD), 它会在每个指定的项目上进行这个动作. 每个文件一行, 来显示一个简要的信息, 说明这三个不同状态之间的区别.

	状态显示
	--------
	状态显示会分成三列, 例如, 文件'subcmds/status.py'在repo这个项目的devwork分支上, 它被修改了:
	project repo/                                   branch devwork
	 -m     subcmds/status.py
	第一列说明暂存区域(索引index)和上次提交(HEAD)之间的区别. 它的值会一直显示成大写字母, 意义如下:
	-:  无差异
	A:  新增加的      (不在HEAD中,      在索引中                     )
 	M:  修改过的      (  在HEAD中,      在索引中,  不同的内容         )
 	D:  删除了的      (  在HEAD中,    不在索引中,                     )
 	R:  改名了的      (不在HEAD中,      在索引中,   补丁变更          )
 	C:  复制了的      (不在HEAD中,      在索引中,   从别的地方复制过来)
 	T:  模式变化      (  在HEAD中,      在索引中,   相同的内容       )
 	U:  没有合并; 需要解决冲突方案

	第二列说明工作目录和索引之间的差异. 它的值会用小写字母来表示, 意义如下:
	-:  新的/未知的   (不在索引中,        在工作树中                )
 	m:  修改过的      (  在索引中,        在工作树中, 修改过        )
 	d:  删除的        (  在索引中,      不在工作树中                )


16. repo sync
	简述
	----
	更新工作树到最新的版次

	用法: repo sync [<project> ...]

	选项:
		-h, --help				显示这个帮助信息后退出.
		-l, --local-only		只更新工作树, 无抓取fetch动作
		-n, --network-only		只抓取fetch, 不更新工作树
		-d, --detach			把项目撤回到manifest中的版次
		repo版本选项:
			--no-repo-verify	不要验证repo的源码

	描述:
	----
	这个命令, 把本地的项目目录和manifest中指定的远程库进行同步. 如果本地项目不存在, 则会克隆一个远程仓库的镜像到本地, 并按manifest中指定的建立一个跟踪分支. 如果本地项目已存在, 则更新远程分支到本地, 再把本地的新的改动在新的远程的基础上进行合并.

	这命令会同步所有命令行中列出的项目. 可以用名字来指定项目, 也可以对项目的本地目录来说, 用相对或绝对的路径来指定它. 如果不指定任何项目, 则manifest中所有的项目都被同步.

	-d/--detach选项用来把指定的项目回滚到manifest中的版次. 在当前项目是一个topic分支时这是很有帮助的, 但这要求manifest中有临时的版次.

	SSH连接
	--------
	如果有至少一个项目的远程url使用了ssh连接(ssh://, git+ssh://, 或user@host:path 语法), repo会自动启用ssh连接管理来连接远程主机. 这个特性可以让同样的repo sync会话中的其他的项目重用ssh通道, 减少建立连接的开销.
	在UNIX平台下, 要禁止这个功能, 需要把GIT_SSH环境亦是设为ssh, 如下:
		export GIT_SSH=ssh
		repo sync

	兼容性
	~~~~~~~~
	这个特性会在windows平台下自动失效, 原因是没有UNIX下面的域套接字domain socket支持.
	如果用户的~/.gitconfig里重写了url.insteadof, 这个特性也是不兼容的. repo sync当前不能在执行重写内容之前建立连接管理的通道.
	如果远程SSH域是Gerrit代码审查系统, 那么要求使用2.0.10或更新的版本, 这样的版本中修复了一个服务器端的协议问题.


17. repo upload
	简述
	----
	把变更上传到代码审查系统中.

	用法: repo upload [--re --cc] {[<project>]... | --replace <project>}

	选项:
		-h, --help				显示这个帮助信息后退出
		--replace				从这个分支中上传替代补丁集
		--re=REVIEWERS, --reviewers=REVIEWERS
								要求指定的这些人来做审查
		--cc=CC					同时发送mail到这些人

	描述
	--------
	这个命令把变更发送到Gerrit审查系统中. 它从本地项目的topic分支中搜索还没有发布的内容准备去审查. 如果发现了多个topic分支, repo upload打开一个编辑器, 让用户选择要上传哪一个分支.
	这个命令搜索在命令行中列出的所有的项目中的可以上传的变更. 项目可以用名字来指定, 或者用对于本地项目目录的相对或绝对路径来指定. 如果没有指定项目, 那么所有在manifest中的项目都会被搜索.
	如果指定了--reviewers或者--cc, 这些用户的email会被分别加到列表中, 并发送email给他们. --reviewers指定的用户必须是代码审查系统中的注册用户, 否则上传会失败.
	如果使用了--replace选项, 用户可以指派gerrit中哪个变更对于上传的分支中的提交更合适. 对于每一个匹配的变更对, 提交会做为一个新的补丁集, 完全取代gerrit中相关的文件和描述.
	配置
	----
	review.URL.autoupload:
	要使'Upload...(y/n)?'提示失效, 你可以设置一个针对每个项目的或全局的配置选项. 如果review.URL.autoupload设置成true, repo会认为你一直回答y, 在以后的上传过程中也不会再提示y/n.如果设成了false, 那么repo会假定你一直回答n, 并且会中止上传.
	这个URL必须符合manifest中列出的审查URL, 或者项目中的.git/config. 例如:
	[remote "origin"]
    	url = git://git.example.com/project.git
    	review = http://review.example.com/

  	[review "http://review.example.com/"]
    	autoupload = true

	参考
	----
	Gerrit代码审查: http://code.google.com/p/gerrit/

	
18. repo version
	简述
	----
	显示repo版本号
	用法: repo version
	选项:
		-h, --help				显示这个帮助信息后退出.
